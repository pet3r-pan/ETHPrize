Jacky & Matthew
3/26/2018


1. Who are you and what are you working on?
   1. Matthew:
      1. Cofounder of Kyokan, CTO  
      2. Client work
      3. Plasma and Plasma Chain.
      4. State channels work with Spankchain.
      5. Infrastructural work + Solidity.
   1. Jacky:
      1. Cofounder of Kyokan 
      2. Building / integrating with Ethereum wallets
      3. Solidity
1. What are the tools/libraries/frameworks you use?
   1. Matthew:
   2. Working on plasma and writing it in Go. Focussed on interoperability between Geth and smart contracts.
   3. My development style:
      1. I really like Java. – enterprise-y tools make me productive.
      2. IDE could be really improved.
         1. I use IntelliJ’s Solidity plugin to edit Solidity.
         2. “Jump-to-def”; “jump-to-implementation”; syntax highlighting
         3. Big difference in productivity.
         4. E.g. when I’m writing Go code, I can jump to the Geth definition. This is amazing.
      1. I’m switching between Solidity / Go, or Solidity / Javascript
         1. Solidity Javascript bindings through Truffle are good.
   1. Integrating libraries designed for cryptocurrencies with front-end apps is hard:
      1. Bundle sizing: different behavior if you’re running in the browser or in the backend.
         1. E.g. if you compile a contract with truffle, you get a JSON file – which has the bytecode and all this stuff beyond the ABI.
            1. This is heavy and unused.
         1. Crypto.js has unnecessary dependencies:
            1. Eth.js includes an ASN.1 parser which parses digital certificates –– which isn’t needed for any crypto.js uses.
         1. Google Chrome places a size limit (3 MB) on service workers in Incognito mode.
            1. Bundle sizing is important – need to take out dependencies.
   1. Standardize the interfaces for all these libraries.
      1. E.g. a standardize library to read BIP39 seed words – across different programming languages.
   1. Is there a Javascript API to boot a testnet, deploy contracts, and run tests against it?
      1. For running application tests –
         1. I want integration tests that run against Truffle easily
         2. Having the ability to do this via Javascript is important
         3. E.g. automate this: https://github.com/machinomy/machinomy/blob/master/run_integration_tests.sh
   1. People don’t know how to productionize a geth node:
      1. On Ubuntu: you can ‘apt-get install geth’
      2. Now, how do you secure it, monitor it, etc?
      3. People say: “just use Infura” – but then you’re tied to Infura.
      4. Some ideas:
         1. Docker instances; Chef or Ansible scripts; that setup a Geth node which has a bunch of best practices around it.
      1. As an example:
         1. Your RPC port shouldn’t be open to the external world, but should be accessible to the front-end.
            1. You need a layer sitting between the geth node and the external world, and gives: 1) analytics, 2) authentication, and 3) audit logging.
            2. The dashboard could configure geth on the fly.
         1. How do you secure a geth node with an RPC port:
            1. Need only certain keys to be allowed to interact with it
   1. Jacky:
   2. Integrating Metamask with Dapps 
   3. Building a new wallet for Spank;
      1. It’s a service worker
         1. Three threads running at once:
            1. Runs a bunch of background processes
            2. The Wallet
            3. The Dapp itself
         1. The messaging between these three threads sucks.
            1. Cross-window JSON RPC library.
            2. Wallets are pushing the limits of what Chrome is capable of.
               1. They’ve had to file two bugs with Chrome in the last month.
         1. Runs into the service worker size limit.
      1. Mostly Javascript and Web3 work
      2. Lot of code repetition in loading state and confirming transactions
      3. Web3 is kinda hard to use – large ABIs
      4. Biggest problem has been around event management.
      5. Key management is not that complicated – Web3 has a good handle on it.
         1. The Web 3 interaction with the wallet:
            1. Web3 provider talks to the blockchain – 
            2. Spank and Metamask – the provider is an instance of the ZeroClientProvider – written by the Metamask team
               1. The ZeroClient makes all calls when there’s no key needed. When a key is needed, it calls into your codebase.
      1. Biggest problem is around the communication of gas costs.
         1. The UX around this.
         2. Users pick really high or low gas costs.
         3. There are better ways to estimate gas.
      1. Would be nice: currency conversion utility tools.
         1. Existing tools are pretty buggy.
            1. ETH has many different units.
         1. Units conversion.
   1. Matthew:
      1. I write all my own methods – other than lowdash where I pull specific utils out.
   1. React / Redux.
      1. Need a way of shoving Web3 stuff into your Redux state. 
      2. Managing the lock state of your wallet
      3. E.g. you need the lock-state of the wallet, because the UI changes.
         1. They written a util that queries the wallet, gets it’s lock-state, and puts it into the Redux state.
      1. Authentication: people have public/private keypair; use this data as login.
         1. Having a canonical way to npm install and have authentication build off of Metamask.
   1. Nice to haves:
      1. Typescript typing for crypto libraries.
      2. Postgres types to manage Ethereum stuff –– addresses, wei, 
         1. Have these methods: .toFinney
1. What are you most excited about in the short term?
   1. Plasma: the future is close – will see this live in 3-6 months.
   2. Generalized state channels: L4 and Spankchain.
   3. Plasma Cash:
      1. The idea of a coin that you sign over to different parties – it’s kind of like a cheque.
         1. Can replace other entrenches business – 
         2. Can attach it to a stablecoin.
   1. In-browser Ethereum light-client: Mascara.
   2. We’re in the internet before packet-switching. 
      1. After that, everything is open and possible. 
      2. Can integrate cryptocurrency with your everyday life.