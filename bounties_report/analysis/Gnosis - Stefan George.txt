Stefan George
05/06/2018 - Andy Tudhope


1. Who are you and what are you working on?
   1. CTO of Gnosis and is building a prediction market, ddex and smart contract wallets.
   2. Started in 2013 - discovered that we could add prediction markets using btc escrow because that was missing (a p2p marketplace for predictions).
   3. Joe Lubin convinced us in 2015 to start a formal platform based on Ethereum, did the token launch and spun out of Consensus and begin working on the more fundamental problems
   4. Decentralized exchanges!! But not efficient on Ethereum today (scalability and number of participants). We have had to contribute to building the DDEX infrastructure.
      1. Prediction markets are a way to create new ERC20 tokens (conditional payment/purchase). The value of those tokens is only defined at a certain point in the future. We can therefore create derivatives of other ERC20 tokens, which are more precise investments under certain conditions.
         1. DDEX allows people to trade the efficiently. It can be done in Ethereum on chain, but scalability, front-running and ease of use just isn’t there yet (need everyone participating and having a global liquidity pool).
      1. Dutch exchange implemented on chain to solve front running problems.
         1. Integrating with USD price feed of Maker - was a little hard to depend on other people’s infrastructure and therefore the tests that they have deployed. We ended up mocking their service for test net, would have been awesome to just point at their package, specify a contract on either network and go without having to mock any of the other services.
      1. Make sure that things like ETHPM are deployed across all test networks.
   1. Also built the multisig wallet for our own token launch, has been very successful and we now want to offer the same experience for every user: more secure wallets for personal use that are even better than hardware wallets.
1. Other domain specific questions?
   1. What does the Gnosis stack look like?
   2. Contracts written in solidity
      1. Many pitfalls, especially for newcomers - need to read documentation 10 times and then sometimes you still don’t get it. 
      2. For e.g. the low-level stuff like .call() is implemented differently from what you might expect that caused funds to get stuck in multisig contracts.
      3. The concept of gas is not that easy to understand and is not transparent.
         1. If you use .send() you use minimum amount of gas versus .call() using all the gas.
         2. Verification of code and garbage handling is not well documented - verifying down in the byte code is very difficult.
         3. Particular problem for symbolic execution and all the additional checks that solidity is doing. Not well optimized at all.
         4. If you access a storage variable twice, you will always have to pay twice, rather than optimizing to keep it in memory - very annoying in the end. Means you have to do a lot of gas optimisations yourself which really should be automatic.
         5. These kind of issues require domain expertise - why don’t we all put up a $1 million bounty for a new smart contract language/compiler.[a]
         6. Might be interesting to keep it lower level, something similar to Vyper with the much simpler bytecode and cheaper execution, better verification etc. We cannot have only one smart contract language.
   1. Using truffle framework because it is most used framework and want their codebase to be as approachable as possible.
      1. Debugging is an absolute pain in the ass - even truffle’s debugger is not great. No easy breakpoints, difficult to step through easily, or change variable to run different kinds of tests.
      2. Would be better to statically typed testing environment - only test framework in JS (python one is not maintained). We need another framework that can go deeper and be more precise.
      3. Web3 itself really sucks. 
      4. API versioning for ethereum json-rpc stuff. No versioning, no documentation, no proper error codes. Plenty of useful calls that are missing, plenty of calls that exist that no-one uses and it’s just chaos in general. We have to assume what version is running on the user end, so have to assume they are running all kind of different versions.
         1. Everyone using MetaMask and Infura makes this slightly more hidden.
         2. I proposed a new json rpc call but geth ahd already implemented it, but it was documented nowhere and Parity hadn’t really thought of doing it at the time, so there is no clear way of defining what the standard is. 
            1. Was about allowing users to sign offline transactions in a specific way: ask the client to sign and return the tx data that can be then used from an offline location.
      1. We need a test suite against the json-rpc API: just to test that Geth and Parity are actually behaving in the same way.
   1. Using Remix IDE - then go to local text editors for further dev once they are sure the contracts run well.
      1. Would be amazing to have a properly integrated environment. Uses Atom with solidity linter. Would be great to be able to do proper debugging in that environment as well. Things work now because complexity is relatively small - but as soon as you want to integrate between projects it becomes a total mess.
      2. Gas metering and fuzz testing in addition to break points, stepping through, and changing variables easily.
   1. Use Mythril to check smart contract security, executions and test coverage. Aim for 100% code coverage and use solc code coverage.
      1. Would love a tool with some basic checks (like overflows etc), but needs to be extended to do optimisations for gas efficiency, standard way to apply smart contract best practices automatically.
      2. Map test coverage to code execution paths so that you can easily see which cases to write tests for. Something better than code coverage which only shows where you touch the line so that we can cover the most important scenarios (i.e. where things are failing).
1. What are your biggest frustrations?
   1. Secondary indexing of blockchain data!!
      1. Only json-rpc calls to retrieve prediction market data would make it impossible for users to see what markets they hold tokens on.
      2. Expose state changes between blocks in an easy to consume fashion. Right now you apply txes, but you don’t know what effect on the state is immediately. You have to assume that you know, or listen to events.
      3. But events shouldn’t even be there as they are just replication of info that is already there on the chain - just make that info more accessible and easy to read and use!!
      4. State changes between blocks, sort of like a github diff that you can take and use to index in a secondary indexer - that would be really helpful.
      5. Writing their own indexer specifically for prediction markets. So is Aragon, and even Augur is now doing it.
   1. More client developers - too few people working down there in the protocols. Set incentives for improving the stuff - which is why ETHPrize is so important.
1. Other bounties?
   1. Bounties are great for small problems, but we need to hire people full time to actually work on this stuff constantly and fix the long term incentives!!
   2. Just waiting for the Ethereum Query Language ;) :p
[a]Interesting point about problems with Solidity