Yondon Fu
1/10/2018 - Sina.


1. Who are you and what are you working on?
   1. Previously: working on smart contracts.
      1. Truffle, testrpc / ganache-cli.
      2. Expanded our test suite so they could run on multiple clients: could point at testrpc, at geth or Parity on PoA mode.
   1. Now: Golang for our node.
      1. Integrating our smart contracts with their node that does video-processing.
      2. Working with Geth. There’s packages for interacting with EVM.
1. What was the hardest part about learning to develop with Ethereum?
   1. Smart contracts:
      1. Contract compilation time is slow. We use Truffle compilation, which I thinks uses Javascript-bindings for C++ compiler. 
         1. Sometimes the compilation takes longer than the tests.
         2. Running C++ compiler (solc) without the Javascript binding is way faster.
            1. Can Truffle use the Solidity compiler internally, without the JS binding?
            2. Maybe this is an easy feature add[a].
         1. I’ve played with DappHub. It’s much faster.
      1. It would also be helpful to specify a compiler version to use without using a completely different version of Truffle
      2. If you make a change, Truffle tries to be smart about which contracts to recompile. Sometimes this doesn’t work and you need to blow away /build dir and recompile. Not a great UX.
      3. In ‘truffle console’: using JS promises are annoying –– can be verbose and hard to read.
         1. Would be cool: having a transformation of that console, if it had async/await, or some kind of wrapper to make things seem synchronous.
      1. If I see an error in a contract:
         1. Debugging sucks. Right now: comment out code, recompile, deploy, run again.
            1. Solidity is adding a “reason” string for the revert message. So you can have reasoning!
      1. They have an internal Ethereum testnet running.
   1. Writing the Go client:
      1. Pain point: nonce management –
         1. Options:
            1. Geth web3.sendTransaction: geth sets the nonce for you.
            2. The other option is to pick the nonce yourself.
         1. For our client, we do the nonce management ourselves: there’s a method to get the Nonce, and includes transactions in “pending” state, but you don’t know them if you’re not a miner.
            1. This is an issue if you submit concurrent transactions.
            2. Parity has a custom method called nextNonce, which works properly – 
      1. Parity vs. Geth different methods – there’s more room for cross-client feature sharing, adding things into the standard RPC interface.
1. Who are the other people you think we should talk to?
   1. Guys at Aragon – Jorge or Oliver.
      1. Ethereum Natural Specification style – basically a commenting style that can have auto-generated comments from it. Aragon is building a custom version of this.
   1. Zeppelin.
   2. 0x
      1. Been putting out good developer tooling. Really into Typescript, static typing.
1. What are your biggest frustrations?
   1. Livepeer that runs as Daemon, unlock your wallet, give this an in-memory key. They have a DPoS protocol built-in.
      1. Similar operational problems as someone running a validator node for Casper FFG
      2. How does Daemon have access to private key, in non-manual confirmation from you? How do you do this securely?
      3. What’s the proper key management flow. Not necessarily a bounty, but shared knowledge.
   1. Need better documentation
      1. Some of the new things you need to use are not documented yet. Writing documentation is a good way to introduce someone to internals of a project (they need to understand stuff to write the docs).
         1. Example: heard this from Eric at Livepeer, there’s a tool in Geth called Pupeth: uses Docker containers to set up an Ethereum private network, gives you dashboard - would be awesome.
         2. libp2p (networking layer for IPFS) especially since it’s gaining a lot of adoption but the examples for getting started are still a little sparse
1. Are there any other questions we should be asking?
   1. Have we considered Grants, for longer-term things, vs. simply bounties?
      1. E.g. Debugger would require longer-term maintenance, needs to develop in pace with Ethereum development. One-time bounty might not be enough.
      2. Might be a fit for longer-term projects. Milestone-based?
   1. Nicola Greco had some interesting ideas about incentivizing more open, collaborative academic research - are there learnings from thinking in this design space that can be applied to general open source?


[a]Research this --