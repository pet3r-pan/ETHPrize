Alex Leverington
07/02/2018 - Robbie & Sina


1. Who are you and what are you working on?
   1. Can’t say what I’ve working on in a concrete way, but I am building a team and starting a new project.
   2. I’m advising some projects.
   3. Did some original stuff on the P2P system.
1. What was the hardest part about learning to develop with Ethereum?
   1. Debugging Solidity and EVM
   2. Robust distributed system for content delivery.
      1. Swarm and IPFS are both in Proof-of-Concept form.
      2. IPFS is minimally viable when you use gateways. But there’s potential for improvement
      3. I haven’t used either in a while –– but my understanding is:
         1. Swarm is a little slow
         2. IPFS is ok –– but you need the client software to run multiple p2p nodes.
      1. All the demonstrations use HTTP gateways –– there aren’t tools and packaging for having production software on the p2p protocol.
      2. Integration should be in the offchain code. 
1. How do you handle testing?
   1. Haven’t come across any tools for game-theoretical stuff.
   2. For code: using scripts for testing.
      1. Ideally there would be a testing env that can do “introspection” & which can evaluate the state of the memory. It should test the effect of code rather than the output of the code and make sure that the tests all integrate with Solidity. 
      2. It’s really hard to write unit test for the EVM state, as a result of some code executing. It would be good to have a test for this[a].
         1. Will be looking at tools in the next two weeks.
         2. Having a tool which exposes the EVM state – for this you need some code that understands how Solidity stores data in the EVM.
         3. For looking at EVM state:
            1. Remix is ok.
            2. Aleph0?! Doesn’t exist any more.
         1. Some cases where your code doesn’t change, but the environment around your code changes –– having actual tests.
1. How do you handle smart contract verification and security?
   1. It would be nice if some of the audits were completely opened up – rather than some statement from the auditors. Could be a security issue.
   2. What we have right now for audits can be improved upon with better tools.
      1. Audits and testing framework go hand in hand.
      2. Auditor should be able to write a test to demonstrate the problem at the EVM level.
         1. Instead of the auditor suggesting some workaround or wrapper.
      1. Or auditor provides proof for something that works well.
1. Who are the other people you think we should talk to?
   1. Ambisafe - Olekseii.
   2. Lunyr - they’ve been kind’ve ahead of the curve in implementing things.
      1. I advise them.
      2. They & cryptokitties have production code on mainnet.


[a]Review