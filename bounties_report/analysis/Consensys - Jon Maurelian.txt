Jon Maurelian
1/10/2018 - Sina & Robbie.


1. Who are you and what are you working on?
   1. I work at Consensys Diligence doing audits; similar to Zeppelin.
   2. Also, I do technical communications / writing blog posts about best practices around security / Consensys docs / token repos.
1. What are your biggest frustrations?
   1. Auditing:
      1. A lot of my time is spent understanding what the developer was trying to do. There’s lots of back-and-forth and I want to maximize the probability that this is the only audit the company needs to do (end up doing a lot of free work this way & comms); 
         1. I would like to see better standards in what the idea of “ready to launch” is / what docs should exist / what the depth of testing should be.
         2. https://media.consensys.net/preparing-for-a-smart-contract-code-audit-83691200cb9c
      1. I want to see:
         1. More efforts on gas optimization.
            1. Using Assembly to do things.
            2. Use different languages.
      1. One thing that kills me:
         1. When people copy-and-paste from Zeppelin or other libraries.
            1. As an auditor: do I run a git diff?
            2. Large inheritances.
            3. Ugly repos. Not tidy. Clean directory structure is key.
               1. These are real contracts.
               2. These are testing contracts.
         1. Wrote blog post so far.
      1. What are most prevalent errors:
         1. People should use EPM to import / or Dapphub.
         2. Add linting -> Solehint (?) / Solium.
      1. What happens in a security audit:
         1. Run the tests. Usually because of different truffle or testrpc version.
            1. Have npm scripts to run local version of truffle.
         1. The easier it is to read tests, the better.
            1. Self-referential tests.
         1. Code coverage. Want all code to be run during testing; important code to be run multiple times.
         2. Test the full specification.
         3. Static analysis: we use a tool called Nifroll (?)
            1. Look at Solc warnings & analyze bytecode.
         1. Reading the code is the most time-consuming part. Best opportunity to make us all more efficient: automated tools to help auditor pay attention to right parts.
            1. This is the most annoying part of the process.
            2. Devs need to have written down their intentions for the code.
               1. Specification is evidence of thoughtfulness.
         1. Use Oyente; but it doesn’t find anything new generally.
      1. We also think through game-theoretic attacks:
         1. E.g. front-running (transaction-ordering stuff).
      1. What’s ideal process for testing:
         1. 1) run local testing
         2. 2) run that test suite on some testnet.
         3. Put system on mainnet with 2 week bug bounty.
            1. E.g. ENS bugs weren’t caught on testnet. There was a typo that didn’t get caught.
         1. Want: more scenarios were there’s economic incentives to break the system – vs. just out of good will of devs spending time.
1. What are the tools/libraries/frameworks you use?
      1. We use Truffle a lot (never had to use Dapple or Embark)
      2. Zeppelin used by clients -- would like to use EPM more
      3. Runs a Geth node myself 
      4. Solhint linter 
      5. Solidity Coverage is test measurement coverage tool
      6. ETHGasReporter (Takes your Mocha reports and says how much Gas your test used.)
         1. Would like to see a fuzz tester.
         2. Excited to learn more formal verification + bringing into practice – intro to Sergio?
1. Who are the other people you think we should talk to?
   1. Piper Merriam
   2. Nick Johnson
   3. Christian Lundkvist (@ Consensys)
   4. Joseph Chow (@ Consensys)
   5. Mike Golden (@ Consensys)
1. What are your biggest frustrations?
   1. Documentation around best practices external to writing smart contracts
      1. E.g. how to safely deploy your system.
         1. There’s easy tricks how to make this easier..
         2. There’s lots of operational & security related info to share..
         3. Bounty this into one doc as resource list.