Nicolay Wolf
2/26/2018


1. Who are you and what are you working on?
   1. Not developing lots of dApps.
   2. Foundational work for WASM:
      1. WASM interpreter
      2. Runtime environment – which allows to run wasm within any network.
      3. Forking Kovan – allowing wasm contracts to run
      4. Running wasm on private chains
   1. WASM interpreter:
   2. Main problem: 
      1. Making the Rust interpreter deterministic.
      2. WASM is not strictly deterministic –– need to narrow down to deterministic opcodes.
         1. Need to ban several opcodes, e.g. floating points. Simple solution: just parse WASM and fail if there’s any floating point opcodes.
         2. Other option: to canonicalize the NaN constant –– you need to bring all these flags under one definition.
            1. One idea: you could check after each floating point opcode –– to see if its NaN and use canonical.
            2. BUT this is not worth the effort, because no blockchains apps will have floating point anyway.
      1. Other sources of determinism: deterministic stack for execution
         1. WASM doesn’t enforce size of the stack –– 
            1. When you get to JIT compilation of WASM, this compiles into using a register-machine specific to the hardware architecture; this process is actually deterministic.
               1. But it’s non-deterministic when you go to run it.
            1. E.g. when a function uses a lot of stack –– e.g. a recursive function that calls itself and itself –– it can fail when it hits the stack limit of the operating system.
               1. This can fail at different times for different machines. So, it’s non-deterministic.
         1. We’re transforming existing WASM into this modified WASM that takes care of these issues.
            1. Any WASM implementation that takes untrusted code from the network needs to have this stuff done.
      1. eWASM collaboration will be helpful –– 
         1. Mozilla has a Rust-WebAssembly group.
   1. Gas metering – not challenging but needs to be done
      1. We have tools which transform WASM from free-form to gas-metered form.
         1. Includes how much opcodes cost.
      1. eWASM has this also –– we’re taking a more scientific approach to this.
         1. Parity simply uses the eWASM table.
         2. Don’t need to be super precise, just need to protect against malicious users.
         3. Memory also costs gas.
            1. Simple way is to charge for memory linearly.
            2. The original idea is to charge for extra memory quadratically more given how much memory was allocated before – but you don’t need to do this anymore, because there’s new ways to allocate memory.
      1. Gas costs are embedded into the bytecode.
   1. Proving the correctness of implementation
      1. Fuzz testing against various interpreters – spec implementation;
         1. Fuzz test: allow the interpreter to run code; it should fail or do the same thing at exactly the same spots as other interpreters or existing codebases.
      1. The interpreter should not panic in any case –– otherwise, malicious actor could crash certain nodes
         1. They use cargo-fuzz for rust
         2. There are also fuzzing tools for WebAssembly: which can generate randomized wasm modules –– can take this; put it into your implementation and the reference implementation; and see that they do the same thing.
1. Other bounties?
   1. Research for cost of running WASM on different architectures and machines.
      1. Scientific proofs on how this correlation works.
      2. Or also computational analysis?
      3. This will be used to assign costs to Opcodes, and also know exactly why.
      4. Parity is using eWASM’s results for this currently.
1. Other domain specific questions?
   1. What is the difference between eWASM and parity-wasm?
      1. Parity works closely with WASM ––
      2. Parity uses the same endianness as EVM. But eWASM uses little-endian / WASM uses little-endian.
      3. How does eWASM callcode, because it depends on hardware architecture?
      4. Parity forbids some useless constructions, e.g. “internal memory” –– 
         1. Any WASM module can include private memory; according to wasm-spec it’s not accessible at runtime; Parity forbids this.
   1. Projects working on WASM:
      1. Parity, eWASM, Dfinity, Bitfury
         1. Bitfury has Exonum – solution for enterprise blockchains with WASM runtime.
   1. Higher-level languages: Rust or anything else that compiles into WASM.
      1. They’ll move away from Solidity. – good to have for backward compatibility (so someone making solidity-wasm compiler would be good) but not necessary.
   1. Standardizing WASM implementations:
      1. Can do renames to match eWASM or something like that. 
   1. Interoperability amongst WASM implementations:
      1. Will have a simple tool that can compile eWASM to parity-wasm to etc etc.
   1. WASM vs. EVM:
      1. WASM doesn’t force you to use the 256-bit machine.
         1. E.g. if your computations fit 32-bit, you don’t have to deal with this inefficiency.
      1. WASM has strong teams behind it.
         1. They’ve made a bet on WASM; so there will be resources behind it.
         2. Bugs will get fixed by the wider community.
      1. WASM can be targeted by mature languages: c++, Rust, Haskell is coming, etc
   1. Resources:
      1. Who’s working on Parity-wasm:
         1. Nicolay & Sergey. 
            1. Nicolay is moving to part-time on this stuff since there’s lots of other work to do.
      1. There will be another meeting about Ethereum sharding & wasm.
         1. Thailand, end of March.
      1. Our libraries:
         1. Parity-wasm: serialization & deserialization library – for changing / transforming the wasm module.
         2. Wasmi: the actual wasm interpreter
            1. https://pepyakin.github.io/wasmi/wasmi/index.html
            2. https://github.com/pepyakin/wasmi
   1. What’s left to do with parity-wasm:
      1. Need good libraries – Rust-specific – to interact with blockchain storage
         1. Solidity gives you this out-of-the-box – but we need to build it for Rust