Scott Wright  


1. Who are you and what are you working on?
   1. Just simple stuff - proofs of concept.
   2. Working through course material
   3. Building a token and a very minor escrow app
   4. Timed auction. 
1. How do you handle testing?
   1. Automated testing?
   2. There’s an IDE that I’ve used - Remix. Provides an interaction with Geth, create test accounts, and then I use that UI to launch a test application on testnet, play with it, see if it works… 
   3. I WANT an automated test suite, but nothing out there right now. 
1. What are the tools/libraries/frameworks you use?
   1. Remix
   2. Geth obviously
   3. SolC for compiling
   4. Yarn is (apparently) standard now for js
   5. If not already mentioned, are there any libraries you rely on regularly?
      1. Web3
1. What tools don’t exist at the moment?
   1. Automated testing - I want a testing suite, a whole tool that is entirely focussed TDD. The work really corresponds to that. Clientless work with many test iterations.
   2. A lot of uncertainty around how gas works. 
      1. What is it exactly, how does it get used, how do you optimize for it? 
      2. The basic idea is fine, but the details when you’re building stuff are very hard to find out
      3. What are the best design patterns for dealing with it, the strategies?
   1. Also, you come up against issues when there’s a withdrawal attack vector, where you try to send ether to them, and there’s some sort of callback function and etc.
   2. There’s a design pattern that works around that, but my level of knowledge is just that someone TOLD me that, but what other things do I need to be aware of? How can I find out more? These are open questions for me right now.
   3. Would love a list of things where I can go through check marks and say “OK, I’ve followed x and y” and I’ve watched out for the following 23 possible issues / attacks.
1. What are your biggest frustrations?
   1. Hasn’t happened across too much yet! Been working in solidity and I find it pretty easy. But how scoping works is confusing. 
   2. There was a situation where I was trying to refer back to something and it was doing something weird and I had to dig and find out that behaviour of memory depends on what SORT of memory its being stored to. 
   3. So, if you get a lot of JS developers, you need to explain how scoping works in JS and how solidity is different in that sense. 
      1. How much of those memory problems are a thing with solidity, or the EVM?
   1. A linter would be very useful!
1. What was the hardest part about learning to develop with Ethereum?
   1. Would have been that initial setup of the development environment, and beginning to build a mental model of what’s going on. Just the setup. 
1. What was the hardest part about learning to develop with Ethereum?
   1. First thing is a soft thing - understanding the difference between a distributed application vs a centralized server application. I’ve taught people some basic blockchain concepts - it doesn’t always make sense to people right away.
   2. The action of calling methods externally on a contract - I kind of understand how that works, and then wait a cycle. There’s a bunch of haziness around how calling methods works though.
   3. And then the exact amount/ability that a method has to change a contract - how much can it do? What are patterns where I could manipulate and kill the contract?
   4. Awesome thing - I love working with apps where there’s no account or login, it just works.
1. What are you most excited about in the short term?
   1. Vyper! 
   2. Have big hopes for truffle - has a lot of the build suite things that I need.
   3. Another thing that’s missing right now is a better IDE, solidity based coding environment right there, so my workflow is that in terminal etc.